<?xml version="1.0" encoding="utf-8"?>
<spoolpad>
  <name>MySqlEquisetumDataContext</name>
  <datacontext autogen="true" enabled="true" />
  <connection>
    <connectionstring>Server=localhost;Database=EQUISETUM_SECURITY;port=5432;searchpath=security;User Id=${user};password=${password}</connectionstring>
    <user>jodan</user>
    <password>linux</password>
    <driver>NHibernate.Driver.NpgsqlDriver</driver>
    <dialect>NHibernate.Dialect.PostgreSQLDialect</dialect>
  </connection>
  <mappings>
    <file>/home/jodan/Projects/Mappings/Test Vari/Country.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Customer.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/NewCountry.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Order.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Product.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/ProductOrder.hbm.xml</file>
  </mappings>
  <codetype>1</codetype>
  <code><![CDATA[DBDomain();

DB<NewCountry>().Spool("***************** Countries");

var ret = DB<NewCountry>().Where(n=>n.Name.EndsWith("2"))
			  .Select(u=> new {MyName=u.Name, MyDes=u.Description} ).First();
ret.Spool();

// Setting the query language to "C# Statement(s)" permits multiple statements:

var words =
	from word in "The quick brown fox jumps over the lazy dog".Split()
	orderby word.ToUpper()
	select word;
	
var duplicates =
	from word in words
	group word.ToUpper() by word.ToUpper() into g
	where g.Count() > 1
	select new { g.Key, Count = g.Count() };	
	
// The Dump extension method writes out queries:

words.Spool();
duplicates.Spool();

var f = words.First();/*dasdasdas*/


// Notice that we do need semicolons now!]]></code>
</spoolpad>