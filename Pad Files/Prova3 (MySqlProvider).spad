<?xml version="1.0" encoding="utf-8"?>
<spoolpad>
  <name>MySqlTestDataContext</name>
  <datacontext autogen="true" enabled="true" />
  <connection>
    <connectionstring>Server=localhost;Database=test;Uid=${user};Pwd=${password}</connectionstring>
    <user>jodan</user>
    <password>linux</password>
    <driver>NHibernate.Driver.MySqlDataDriver</driver>
    <dialect>NHibernate.Dialect.MySQL5Dialect</dialect>
  </connection>
  <mappings>
    <file>/home/jodan/Projects/Mappings/Test Vari/Country.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Customer.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Order.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/Product.hbm.xml</file>
    <file>/home/jodan/Projects/Mappings/Test Vari/ProductOrder.hbm.xml</file>
  </mappings>
  <codetype>1</codetype>
  <code><![CDATA[DBDomain();

DB<Customer>().Spool("Customers");


// LINQPad's "Dump" extension method will eat just about anything!

123.Spool();
Regex.Match ("my favorite color is...", "colou?r").Spool();

//  Dump accepts an optional title for formatting:

TimeZoneInfo.Local.Spool ("Bet you never knew this type existed!");

// Dump returns exactly what it was given, so you can sneakily inject
// a Dump (or even many Dumps) *within* an expression. This is useful
// for monitoring a query as it progresses:

new[] { 11, 5, 17, 7, 13 }	.Spool ("Prime numbers")
.Where (n => n > 10)		.Spool ("Prime numbers > 10")
.OrderBy (n => n)		.Spool ("Prime numbers > 10 sorted")
.Select (n => n * 10) 		.Spool ("Prime numbers > 10 sorted, times 10!");]]></code>
  <usings />
  <references />
</spoolpad>